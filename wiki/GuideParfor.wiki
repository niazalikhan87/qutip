#guide to using the parlor function to speedup tasks.

Often one is interested in the output of a given function as a single-parameter is varied.  For instance, in the *[ExamplesDrivenCavitySS Driven steady-state cavity]* example, we calculate the steady-state response as the driving frequency is varied.  In cases such as this, where each iteration is independent of the others, we may speedup the calculations by performing the iterations in parallel.  In QuTiP, parallel computations may be performed using the *[Functions#parfor(func,frange) parfor]* (parallel-for-loop) function.

To use the parfor function we need to define a function of a single-variable, and the range over which this variable is to be iterated.  For example:

{{{
def func1(x):
    return x,x**2,x**3
[a,b,c]=parfor(func1,range(10))

print a
print b
print c

[0 1 2 3 4 5 6 7 8 9]
[ 0 1 4 9 16 25 36 49 64 81]
[ 0 1 8 27 64 125 216 343 512 729]
}}}

One can also use a single output variable as:

{{{
x=parfor(func1,range(10))

print x[0]
print x[1]
print x[2]

[0 1 2 3 4 5 6 7 8 9]
[ 0  1  4  9 16 25 36 49 64 81]
[  0   1   8  27  64 125 216 343 512 729]
}}}

The parfor function is not limited to just numbers, but also works for a variety of outputs:

{{{
def func2(x):
    return x,Qobj(x),'a'*x

[a,b,c]=parfor(func2,range(5))

print a
print b
print c

[0 1 2 3 4]
Quantum object: dims = [[1], [1]], shape = [1, 1], type = ket
Qobj data = 
[[0]]
Quantum object: dims = [[1], [1]], shape = [1, 1], type = ket
Qobj data = 
[[1]]
Quantum object: dims = [[1], [1]], shape = [1, 1], type = ket
Qobj data = 
[[2]]
Quantum object: dims = [[1], [1]], shape = [1, 1], type = ket
Qobj data = 
[[3]]
Quantum object: dims = [[1], [1]], shape = [1, 1], type = ket
Qobj data = 
[[4]]
['' 'a' 'aa' 'aaa' 'aaaa']
}}}