#Function list

This is a complete, alphabetical, function list for QuTiP.  Examples are also given where appropriate.  Arguments with the #-sign are optional.
*<wiki:toc max_depth="2" />*

= A =

==about()==
    @brief Displays QuTip about box.

----

= B = 

==basis(N,#m)==
    @brief Generates the vector representation of a bosonic number state.
    
    @param *N* the number of states in the Hilbert space
    
    @param *m* `int` corresponding to desired number state, defaults to 0 if omitted
    
    @returns *Qobj* quantum object representing the requested number state |args>

{{{
basis(5,3)
Quantum object: dims = [[5], [1]], shape = [5, 1], type = ket
Qobj data = 
[[ 0.]
 [ 0.]
 [ 0.]
 [ 1.]
 [ 0.]]
}}}

----

=C=

==clebsch(j1,j2,j3,m1,m2,m3)==
    @brief  Calculates the Clebsch-Gordon coefficient for coupling (j1,m1) and (j2,m2) to give (j3,m3).

    @param *j1*

    @param *j2*

    @param *j3*

    @param *m1*

    @param *m2*

    @param *m3*

----
==correlation_es(H, rho0, tlist, taulist, c_op_list, a_op, b_op)==
     @brief   Calculate a two-time correlation function <A(t+tau)B(t)> using exponential series and the quantum regression theorem.

    @param *H*              ` Qobj`  system Hamiltonian

    @param *rho0*          `Qobj`  initial density matrix

    @param *tlist*           `list`/`array` of times

    @param *taulist*       `list`/`array` of tau times

    @param *c_op_list*   `list` of collapse operators

    @param *a_op*          `Qobj` of A operator

    @param *b_op*          `Qobj` of B operator
----

==correlation_ode(H, rho0, tlist, taulist, c_op_list, a_op, b_op)==
    @brief   Calculate a two-time correlation function <A(t+tau)B(t)> using the ode solver, and the quantum regression theorem. 

    @param *H*              ` Qobj`  system Hamiltonian

    @param *rho0*          `Qobj`  initial density matrix

    @param *tlist*           `list`/`array` of times

    @param *taulist*       `list`/`array` of tau times

    @param *c_op_list*   `list` of collapse operators

    @param *a_op*          `Qobj` of A operator

    @param *b_op*          `Qobj` of B operator

----

==correlation_mc(H, psi0, tlist, taulist, c_op_list, a_op, b_op)==
    @brief   Calculate a two-time correlation function <A(t+tau)B(t)> using the Monte-Carle solver, and the quantum regression theorem.. 

    @param *H*              ` Qobj`  system Hamiltonian

    @param *rho0*          `Qobj`  initial density matrix

    @param *tlist*           `list`/`array` of times

    @param *taulist*       `list`/`array` of tau times

    @param *c_op_list*   `list` of collapse operators

    @param *a_op*          `Qobj` of A operator

    @param *b_op*          `Qobj` of B operator

----

==cnot()==
    @brief   Quantum object representing the CNOT gate.

    @returns *Qobj*    CNOT quantum object
{{{
cnot()
Quantum object: dims = [[2, 2], [2, 2]], shape = [4, 4], type = oper, isHerm = True
Qobj data = 
[[ 1.  0.  0.  0.]
 [ 0.  1.  0.  0.]
 [ 0.  0.  0.  1.]
 [ 0.  0.  1.  0.]]
}}}
----


=D=

=E=

=F=
==fredkin()==
    @brief quantum object representing the Fredkin gate.

    @returns *Qobj* quantum object for Fedkin gate
{{{
fredkin()
Quantum object: dims = [[2, 2, 2], [2, 2, 2]], shape = [8, 8], type = oper, isHerm = True
Qobj data = 
[[ 1.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  1.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  1.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  1.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  1.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  1.  0.]
 [ 0.  0.  0.  0.  0.  1.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  1.]]
}}}
----
=G=

=H=
==hadamard()==
    @brief  quantum object representing the Hadamard gate.

    @returns *Qobj* quantum object for Hadamard gate
{{{
hadamard()
Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isHerm = True
Qobj data = 
[[ 0.70710678  0.70710678]
 [ 0.70710678 -0.70710678]]
}}}
----

=I=

=J=

=K=

=L=

=M=

=N=

=O=

=P=
==phasegate(theta)==
    @brief quantum object representation of phase gate with angle theta

    @param *theta* angle of phase rotation, exp(1j*theta).

    @returns *Qobj*  quantum object for phase gate with angle theta.
{{{
phasegate(pi/8)
Quantum object: dims = [[2], [2]], shape = [2, 2], type = oper, isHerm = False
Qobj data = 
[[ 1.00000000+0.j          0.00000000+0.j        ]
 [ 0.00000000+0.j          0.92387953+0.38268343j]]
}}}
----
=Q=

=R=

=S=
==swap()==
    @brief quantum object representing swap gate.

    @returns *Qobj* quantum object for swap gate
{{{
swap()
Quantum object: dims = [[2, 2], [2, 2]], shape = [4, 4], type = oper, isHerm = True
Qobj data = 
[[ 1.  0.  0.  0.]
 [ 0.  0.  1.  0.]
 [ 0.  1.  0.  0.]
 [ 0.  0.  0.  1.]]
}}}
----
=T=
==toffoli()==
    @brief quantum operator for Toffoli gate.
 
    @returns *Qobj* quantum object for Toffoli gate
{{{
toffoli()
Quantum object: dims = [[2, 2, 2], [2, 2, 2]], shape = [8, 8], type = oper, isHerm = True
Qobj data = 
[[ 1.  0.  0.  0.  0.  0.  0.  0.]
 [ 0.  1.  0.  0.  0.  0.  0.  0.]
 [ 0.  0.  1.  0.  0.  0.  0.  0.]
 [ 0.  0.  0.  1.  0.  0.  0.  0.]
 [ 0.  0.  0.  0.  1.  0.  0.  0.]
 [ 0.  0.  0.  0.  0.  1.  0.  0.]
 [ 0.  0.  0.  0.  0.  0.  0.  1.]
 [ 0.  0.  0.  0.  0.  0.  1.  0.]]
}}}
----
=U=

=V=

=W=

=X=

=Y=

=Z=


























