#guide to plotting with the Bloch sphere class
*<wiki:toc max_depth="2" />*
==Intro==
When studying the dynamics of a two-level system, it is often convent to visualize the state of the system by plotting the state-vector on the Bloch sphere.  In QuTiP, we have created the Bloch class to allow for easy creation and manipulation of data sets, both vectors and data points, on the Bloch sphere.

==The Bloch class==
In QuTiP, creating a Bloch sphere is accomplished by calling:
{{{
b=Bloch()
}}}
which will load an instance of the Bloch class.  Before getting into the details of this object, we can simply plot the blank Bloch sphere associated with this instance via:
{{{
b.show()
}}}
http://qutip.googlecode.com/svn/wiki/images/bloch_empty.png

In addition to the `show()` command, the Bloch class has the following functions:

||Name|| Input Parameters || Usage ||
||add_points|| list/array of (x,y,z) points, *'s'* (optional)|| adds a single or set of data points to be plotted on the sphere. meth='s' (default meth=None) will plot multiple data points as a collection of single points.||
||add_states|| Qobj representing state or density matrix of a two-level system|| can input multiple states as a list or array||
||add_vectors|| list/array of  (x,y,z) points giving direction and length of state vectors|| adds single or multiple  vectors to plot|| 
||clear|| none|| removes all data from Bloch sphere.  Keeps customized figure properties in the [GuideBloch#Configuring_the_Bloch_sphere Configuring the Bloch sphere] section.||
||save||*format* (optional) format of output file, *dirc* (optional) output directory|| saves Bloch sphere as a file with format (default: format='png') to given directory (default: dirc= current working directory)||
||show|| none || creates Bloch sphere with given data sets||

As an example, we can add a single data point:
{{{
pnt=[1/sqrt(3),1/sqrt(3),1/sqrt(3)]
b.add_points(pnt)
b.show()
}}}
http://qutip.googlecode.com/svn/wiki/images/bloch_1pnt.png

and then a single vector:
{{{
vec=[0,1,0]
b.add_vectors(pnt)
b.show()
}}}
http://qutip.googlecode.com/svn/wiki/images/bloch_pnt+vec.png

and then add another vector corresponding to the |up> state:
{{{
up=basis(2,0)
b.add_states(up)
b.show()
}}}
http://qutip.googlecode.com/svn/wiki/images/bloch_pnt+vec+state.png

Notice that when we add more than a single vector (or data point), a different color will automatically be applied to the later data set (mod 4).  In total, the code for constructing our Bloch sphere with two vectors and a single data point is:
{{{
b=Bloch()
pnt=[1/sqrt(3),1/sqrt(3),1/sqrt(3)]
b.add_points(pnt)
#b.show()
vec=[0,1,0]
b.add_vectors(pnt)
#b.show()
up=basis(2,0)
b.add_states(up)
b.show()
}}}
where we have commented out the extra `show()` commands.  We can also plot multiple points, vectors, and states at the same time by passing list or arrays instead of individual elements.  Before giving an example, we can use the `clear()` command to remove the current data from our Bloch sphere instead of creating a new instance:
{{{
b.clear()
b.show()
}}}
http://qutip.googlecode.com/svn/wiki/images/bloch_empty.png

Now on the same Bloch sphere, we can plot the three states associated with the x, y, and z directions:
{{{
x=(basis(2,0)+(1+0j)*basis(2,1)).unit()
y=(basis(2,0)+(0+1j)*basis(2,1)).unit()
z=(basis(2,0)+(0+0j)*basis(2,1)).unit()
b.add_states([x,y,z])
b.show()
}}}
http://qutip.googlecode.com/svn/wiki/images/bloch_xyz_states.png

a similar method works for adding vectors:
{{{
vec=[[1,0,0],[0,1,0],[0,0,1]]
b.add_vectors(vec)
}}}

Adding multiple points to the Bloch sphere works slightly differently than adding multiple states or vectors.  For example, lets add a set of 20 points around the equator (after calling `clear()`):
{{{
xp=[cos(th) for th in linspace(0,2*pi,20)]
yp=[sin(th) for th in linspace(0,2*pi,20)]
zp=zeros(20)
pnts=[xp,yp,zp]
b.add_points(pnts)
b.show()
}}}
http://qutip.googlecode.com/svn/wiki/images/bloch_equ_pnts.png

Notice that, in contrast to states or vectors, each point remains the same color as the initial point.  This is because multiple data points are interpreted, by default, to correspond to a single data point (single qubit state) plotted at different times.  This is very useful when visualizing the dynamics of a qubit.  An example of this is given in the [ExamplesBlochQubitDecay Qubit Decay on the Bloch Sphere] example.  If instead we want to plot each of these data points as a separate qubit state, we can indicate this using the following commands (again after `clear()`:
{{{
xp=[cos(th) for th in linspace(0,2*pi,20)]
yp=[sin(th) for th in linspace(0,2*pi,20)]
zp=zeros(20)
b.add_points(pnts,'s') # <-- add a 's' string to signify 'single' points
b.show()
}}}
http://qutip.googlecode.com/svn/wiki/images/bloch_multi_pnts.png

Now, the data points will cycle through a variety of predefined colors, and marker shapes.  Now lets add another set of points, but this time we want the set to represent a single state as a function of time, say from the |up> state to the |down> state in the y-z plane:
{{{
xz=zeros(20)
yz=[sin(th) for th in linspace(0,pi,20)]
zz=[cos(th) for th in linspace(0,pi,20)]
b.add_points([xz,yz,zz]) # no 's'
b.show()
}}}
http://qutip.googlecode.com/svn/wiki/images/bloch_pnts+pnts.png

The entire code for this final sphere is thus:
{{{
b=Bloch()

xp=[cos(th) for th in linspace(0,2*pi,20)]
yp=[sin(th) for th in linspace(0,2*pi,20)]
zp=zeros(20)

xz=zeros(20)
yz=[sin(th) for th in linspace(0,pi,20)]
zz=[cos(th) for th in linspace(0,pi,20)]

b.add_points([xp,yp,zp],'s')
b.add_points([xz,yz,zz])

b.show()
}}}
We have had to call `add_points` twice because adding more than one set of multiple data points is *not* supported by the add_points function.

==Configuring the Bloch sphere==
At the end of the last section we saw that the colors and marker shapes of the data plotted on the Bloch sphere are automatically varied according to the number of points and vectors added.  But what if you want a different choice of color, or you want your sphere to be purple with different axes labels? Well then you are in luck as the Bloch class has 20 attributes which one can control.  Assuming `b=Bloch()':   

||Attribute||Function||Default Setting||
||b.font_color||Color of fonts|| `'black'`||
||b.font_size||Size of fonts||20||
||b.frame_alpha||Transparency of wireframe||0.1||
||b.frame_color||Color of wireframe||`'gray'`||
||b.frame_width||Width of wireframe||1||
||b.point_color||List of colors for Bloch point markers to cycle through||`['b','r','g','#CC6600']`||
||b.point_marker||List of point marker shapes to cycle through||`['o','s','d','^']`||
||b.point_size||List of point marker sizes (not all markers look the same size when plotted)||`[25,32,35,45]`||
||b.sphere_alpha||Transparency of Bloch sphere|| 0.2||
||b.sphere_color||Color of Bloch sphere|| `'#FFDDDD'`||
||b.size||Sets size of figure window||`[7,7]` (700x700 pixels)||
||b.vector_color||List of colors for Bloch vectors to cycle through|| `['g','#CC6600','b','r']`||
||b.vector_width||Width of Bloch vectors||3||
||b.view||Azimuthal and Elvation viewing angles|| `[-60,30]`||
||b.xlabel||Labels for x-axis||`['$x$','']` +x and -x (labels use LaTeX)||
||b.xlpos||Position of x-axis labels||`[1.1,-1.1]`||
||b.ylabel||Labels for y-axis||`['$y$','']` +y and -y (labels use LaTeX)||
||b.ylpos||Position of y-axis labels||`[1.2,-1.2]`||
||b.zlabel||Labels for z-axis||`['$\left|0\\right>$','$\left|1\\right>$']` +z and -z (labels use LaTeX)||
||b.zlpos||Position of z-axis labels||`[1.2,-1.2]`||

==Animating with the Bloch sphere==
The Bloch class was designed from the outset to generate animations.  To animate a set of vectors or data points the basic idea is: plot the data at time t1, save the sphere, clear the sphere, plot data at t2,... The Bloch sphere will automatically number the output file based on how many times the object has been saved (this is stored in b.savenum).  An example of generating images for animation is given below:
{{{
from qutip import *

b=Bloch()

vec=array([[cos(th),sin(th),0.5*sin(4*th)] for th in linspace(0,2*pi,120)])
vec=array([k/norm(k) for k in vec]) #normalize

for k in range(120):
    b.add_vectors(vec[k])
    b.save(dirc=os.getcwd()+'/temp') #saving images to temp directory in current working directory
    b.clear()
}}}

http://qutip.googlecode.com/svn/wiki/images/bloch_movie.gif
