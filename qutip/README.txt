################################
# QuTiP README FILE FOR CPC
# Version: 1.1.3
# P.D. Nation and J.R. Johansson
################################

FILES LIST
----------
COPYING.txt                         # Copy of GPL-3.
INSTALL.text                        # Installation instructions.
RELEASE.txt                         # Release notes for each version of QuTiP.
setup.py                            # QuTiP installation script.
    qutip/
        __init__.py                 # Initialize qutip modules.
        _version.py                 # Holds qutip version information.
        about.py                    # Calls About box.
        basis.py                    # Generates Fock state basis functions.
        Bloch.py                    # Class that generates a Bloch sphere plot.
        clebsch.py                  # Calculates a Clebsch-Gordon coefficient
        correlation.py              # Calculate a two-time correlation function <A(tau)B(0)>.
        demos.py                    # Runs the demos GUI or command line script.
        entropy.py                  # Module of functions used for calculating various entropy measures.
        eseries.py                  # Class defining the exponential series object.
        essolve.py                  # Evolution of a state vector or density matrix with ODE expressed as eseries object.
        expect.py                   # Calculates expectation values.
        fileio.py                   # Module for saving and loading Qobj objects/
        gates.py                    # A Module of select gates for use in quantum computing calculations.
        graph.py                    # Draws a Hinton diagram for visualizing a density matrix.
        istests.py                  # A collection of tests for determining the properties of a Qobj object.
        mcdata.py                   # Holds the Hamiltonian data for a time-dependent Monte-Carlo simulation.
        mcsolve.py                  # Runs a Monte-Carlo simulation for a given input Hamiltonian.
        metrics.py                  # A collection of density matrix metrics.
        Odeoptions.py               # Class of options for ODE solver used in mcsolve and odesolve.
        odesolve.py                 # Runs a master equation simulation for a given input Hamiltonian.
        operators.py                # A collection of commonly used quantum operators.
        orbital.py                  # Calculates an angular wave function on a sphere.
        parfor.py                   # Runs a for-loop in parallel for a given single-variable function. 
        propagator.py               # Calculate the propagator U(t) for the density matrix or wave function.
        ptrace.py                   # Performs a partial trace of a given composite quantum object.
        Qobj.py                     # The main quantum object class.  Defines the properties of the key object in qutip.
        qstate.py                   # Generates coupled states of qubits where each qubit is in the |up> or |down> state. 
        simdiag.py                  # Performs simultaneous diagonalization of commuting, Hermitian operators
        sphereplot.py               # Plots spherical wave functions generated by orbital.py.
        states.py                   # A collection of commonly used state vectors and density matrices
        steady.py                   # Calculated the steady state evolution for a given Hamiltonian
        superoperator.py            # Module of superoperators used for converting a Hamiltonian into a Louvillian.
        tensor.py                   # Generates a composite quantum object from two or more state vectors or density matricies.
        three_level_atom.py         # A collection of commonly used states and operators for three-level atoms.
        tidyup.py                   # Removes small elements from a quantum object
        varargout.py                # Determines the number of requested output arguments.
        wigner.py                   # Generates the Wigner function and Q function for a given state vector or density matrix.
        cyQ/
            __init__.py             # Initialize cyQ modules.
            codegen.py		    # Class for automatically generating Cython files for time-dependent problems (currently disabled).
	    cy_mc_funcs.c           # Cython generated C-code for Monte-Carlo solver.
            cy_mc_funcs.pyx         # Cython source code for cy_mc_funcs.c.
	    ode.rhs.c		    # Cython generated C-code for ODE RHS multiplication.
            ode.rhs.pyx		    # Cython source code for ode_rhs.c.
	    setup.py                # Setup file for generating *.c files from *.pyx.
        examples/
            __init__.py             # Initialize examples modules.
            blochdemo.py            # Demo for Bloch sphere plotting.
            cavityqubitmc.py        # Demo for cavity-qubit evolution using Monte-Carlo method.
            correlation.py          # Demo for calculating correlation functions.
            cqsteady.py             # Example for solving steady-state evolution.
            esdemo.py               # Demo using eseries class
            exconfig.py             # Holds variable used by Examples.py.
            fidelity_example.py     # Demo calculating fidelity of trilinear Hamiltonian.
            jc_lasing.py            # Jaynes-Cumming single-atom lasing demo.
            jc_vacuum_rabi.py       # Jaynes-Cumming vacuum Rabi oscillations demo.
            mcthermal.py            # Demo of trilinear deviations from a thermal state.
            propagatordemo.py       # Demo for calculating the propagator of a closed system.
            qobjbasics.py           # Demo introducing the Qobj class and it's methods.
            schrodingercat.py       # Plots the Wigner function for a Schrodinger cat-state.
            spinchain.py            # Example for calculating expectation values of a spin-chain.
            squeezed.py             # Wigner and Q functions of a squeezed state.
            states_opers.py         # Introduction to manipulating states and operators.
            td_landauzener.py       # Demo for time-dependent Landau-Zener problem.
            td_rabi.py              # Demo for time-dependent Rabi oscillations.
            tensorptrace.py         # Demo using tensor products and partial traces.
            termpause.py            # Function that waits for terminal input.
            thermalss.py            # Demo solving for steady-state in a thermal environment.
            trilinearmc.py          # Solving trilinear Hamiltonian using Monte-Carlo method.
        gui/
            __init__.py             # Initialize GUI modules.
            AboutBox.py             # Class for generating QuTiP About box.
            Examples.py             # Class for demos GUI or command line. 
            logo.png                # QuTiP logo used in About box.
            ProgressBar.py          # Class for Monte-Carlo progress bar GUI.
        
        
        
USER GUIDE
----------        

An in-depth user guide may be found at the QuTiP homepage:

http://qutip.googlecode.com/svn/doc/1.1.3/html/index.html       
        
        
DEMO SCRIPTS
------------

QuTiP contains a collection of 20 built-in demo scripts that may be called from the Python command line via:
	
from qutip import *
demos()

        
        
        
        
        
        
        
        
        
        
        
        
        
        
    